# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: ID!
  isLocked: Boolean!
  isDisabled: Boolean!
  isVerified: Boolean!
  createdAt: String!
  updatedAt: String!
  name: String!
  surnames: String!
  email: String!
}

type PaginatedAuthor {
  limit: Int
  page: Int
  docs: [User!]
  totalCount: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  totalPages: Int
  nextPage: Int
  prevPage: Int
  pagingCounter: Int
  totalDocs: Int
}

type ManagerRole {
  """Example field (placeholder)"""
  exampleField: Int!
}

type ManagerPermission {
  _id: ID!
  isLocked: Boolean!
  isDisabled: Boolean!
  isVerified: Boolean!
  createdAt: String!
  updatedAt: String!
  name: String!
  description: String!
  path: String!
}

type Query {
  sayHello: String!
  userTotal: Float!
  userList(limit: Int = 10, page: Int = 0, query: QueryInput, select: String, sort: SortInput, populate: [PopulateInput!], isPaginate: Boolean = true): PaginatedAuthor!
  userId(id: ID!): User!
  permissionTotal: Float!
  permissionList(limit: Int = 10, page: Int = 0, query: QueryInput, select: String, sort: SortInput, populate: [PopulateInput!], isPaginate: Boolean = true): PaginatedAuthor!
  permissionId(id: ID!): ManagerPermission!
  roleTotal: Float!
  roleList(limit: Int = 10, page: Int = 0, query: QueryInput, select: String, sort: SortInput, populate: [PopulateInput!], isPaginate: Boolean = true): PaginatedAuthor!
  roleId(id: ID!): ManagerRole!
}

input QueryInput {
  name: String
  surnames: Int
  email: Int
  isLocked: Boolean
  isDisabled: Boolean
  isVerified: Boolean
}

input SortInput {
  fields: [SortField!]!
}

input SortField {
  field: String!
  order: SortOrder!
}

enum SortOrder {
  DESC
  ASC
}

input PopulateInput {
  path: String!
  select: String
  model: String
}

type Mutation {
  userRegister(createUserInput: CreateUserInput!): User!
  userFindOne(filter: FindOneUserInput!): User!
  userUpdate(updateUserInput: UpdateUserInput!): User!
  userRemove(id: ID!): User!
  permissionRegister(createPermissionInput: CreateManagerPermissionInput!): ManagerPermission!
  permissionFindOne(filter: FilterPermissionInput!): ManagerPermission!
  permissionUpdate(updatePermissionInput: UpdateManagerPermissionInput!): ManagerPermission!
  permissionRemove(id: ID!): ManagerPermission!
  roleRegister(createRoleInput: CreateManagerRoleInput!): ManagerRole!
  roleFindOne(filter: FilterRoleInput!): ManagerRole!
  roleUpdate(updateRoleInput: UpdateManagerRoleInput!): ManagerRole!
  roleRemove(id: ID!): ManagerRole!
}

input CreateUserInput {
  name: String!
  surnames: String!
  email: String!
  password: String!
  isLocked: Boolean
  isDisabled: Boolean
  isVerified: Boolean
}

input FindOneUserInput {
  search: String!
  value: String!
}

input UpdateUserInput {
  _id: ID!
  name: String
  email: String
  address: String
}

input CreateManagerPermissionInput {
  name: String!
  description: String!
  path: String!
  isLocked: Boolean!
  isDisabled: Boolean!
  isVerified: Boolean!
}

input FilterPermissionInput {
  name: String!
  description: String!
  path: String!
  isLocked: Boolean!
  isDisabled: Boolean!
  isVerified: Boolean!
}

input UpdateManagerPermissionInput {
  _id: ID!
}

input CreateManagerRoleInput {
  name: String!
  description: String!
  permission: String!
  isLocked: Boolean!
  isDisabled: Boolean!
  isVerified: Boolean!
}

input FilterRoleInput {
  name: String!
  description: String!
  permission: String!
  isLocked: Boolean!
  isDisabled: Boolean!
  isVerified: Boolean!
}

input UpdateManagerRoleInput {
  name: String
  description: String
  permission: String
  isLocked: Boolean
  isDisabled: Boolean
  isVerified: Boolean
  _id: ID!
}