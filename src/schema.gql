# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role {
  _id: ID!
  isLocked: Boolean!
  isDisabled: Boolean!
  isVerified: Boolean!
  createdAt: String!
  updatedAt: String!
  name: String!
  permissions: [String!]!
  allPermission: Boolean!
}

type PaginatedRole {
  nodes: [Role!]
  limit: Int
  page: Int
  totalCount: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  totalPages: Int
  nextPage: Int
  prevPage: Int
  pagingCounter: Int
  totalDocs: Int
}

type User {
  _id: ID!
  isLocked: Boolean!
  isDisabled: Boolean!
  isVerified: Boolean!
  createdAt: String!
  updatedAt: String!
  name: String!
  surnames: String!
  email: String!
  language: String!
  roles: [Role!]!
}

type PaginatedUser {
  nodes: [User!]
  limit: Int
  page: Int
  totalCount: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  totalPages: Int
  nextPage: Int
  prevPage: Int
  pagingCounter: Int
  totalDocs: Int
}

type AuthenticationResultTypeGQL {
  AccessToken: String
  ExpiresIn: String
  IdToken: String
  RefreshToken: String
  TokenType: String
}

type SignInRefreshAuthInterface {
  ChallengeName: String
  Session: String
  AuthenticationResult: AuthenticationResultTypeGQL
}

type CodeDeliveryDetailsInterface {
  AttributeName: String
  DeliveryMedium: String
  Destination: String
}

type InitiateAccountRecoveryInterface {
  CodeDeliveryDetails: CodeDeliveryDetailsInterface
}

type ResponseMetadataInterface {
  httpStatusCode: Float
  requestId: String
  attempts: Float
  totalRetryDelay: Float
}

type ConfirmForgotPasswordInterface {
  metadata: ResponseMetadataInterface
}

type CodeDeliveryDetailsTypeInterface {
  destination: String
  deliveryMedium: String
  attributeName: String
}

type SignUpAuthInterface {
  userConfirmed: Boolean
  codeDeliveryDetails: CodeDeliveryDetailsTypeInterface
  userNameCognito: String
  metadata: ResponseMetadataInterface
}

type ConfirmSignUpInterface {
  metadata: ResponseMetadataInterface
  userName: String
}

type Permission {
  _id: ID!
  isLocked: Boolean!
  isDisabled: Boolean!
  isVerified: Boolean!
  createdAt: String!
  updatedAt: String!
  name: String!
  resourcePath: String!
  description: String!
}

type PaginatedPermission {
  nodes: [Permission!]
  limit: Int
  page: Int
  totalCount: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  totalPages: Int
  nextPage: Int
  prevPage: Int
  pagingCounter: Int
  totalDocs: Int
}

type Organization {
  _id: ID!
  isLocked: Boolean!
  isDisabled: Boolean!
  isVerified: Boolean!
  createdAt: String!
  updatedAt: String!
  name: String!
}

type PaginatedOrganization {
  nodes: [Organization!]
  limit: Int
  page: Int
  totalCount: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  totalPages: Int
  nextPage: Int
  prevPage: Int
  pagingCounter: Int
  totalDocs: Int
}

type Query {
  sayHello: String!
  USER_TOTAL: Float!
  USER_LIST(limit: Int = 10, page: Int = 0, query: QueryInput, select: String, sort: SortInput, populate: [PopulateInput!], isPaginate: Boolean = true): PaginatedUser!
  USER_ID(id: FilterByIdUserInput!): User!
  USER_FIND_ONE(filter: FindOneUserInput!): User!
  AUTH_VALIDATE_REGISTRATION(configSigUpDto: ConfigSigUpDto!): ConfirmSignUpInterface!
  ROLE_TOTAL: Float!
  ROLE_LIST(limit: Int = 10, page: Int = 0, query: QueryInput, select: String, sort: SortInput, populate: [PopulateInput!], isPaginate: Boolean = true): PaginatedRole!
  ROLE_ID(id: FilterByIdRoleInput!): Role!
  ROLE_FIND_ONE(filter: FindOneRoleInput!): Role!
  PERMISSION_TOTAL: Float!
  PERMISSION_LIST(limit: Int = 10, page: Int = 0, query: QueryInput, select: String, sort: SortInput, populate: [PopulateInput!], isPaginate: Boolean = true): PaginatedPermission!
  PERMISSION_ID(id: FilterByIdPermissionInput!): Permission!
  PERMISSION_FIND_ONE(filter: FindOnePermissionInput!): Permission!
  ORGANIZATION_TOTAL: Float!
  ORGANIZATION_LIST(limit: Int = 10, page: Int = 0, query: QueryInput, select: String, sort: SortInput, populate: [PopulateInput!], isPaginate: Boolean = true): PaginatedOrganization!
  ORGANIZATION_ID(id: FilterByIdOrganizationInput!): Organization!
  ORGANIZATION_FIND_ONE(filter: FindOneOrganizationInput!): Organization!
}

input QueryInput {
  name: String
  surnames: Int
  email: Int
  isLocked: Boolean
  isDisabled: Boolean
  isVerified: Boolean
}

input SortInput {
  fields: [SortField!]!
}

input SortField {
  field: String!
  order: SortOrder!
}

enum SortOrder {
  DESC
  ASC
}

input PopulateInput {
  path: String!
  select: String
  model: String
}

input FilterByIdUserInput {
  id: String!
}

input FindOneUserInput {
  search: String!
  value: String!
}

input ConfigSigUpDto {
  userName: String!
  code: String!
}

input FilterByIdRoleInput {
  id: String!
}

input FindOneRoleInput {
  search: String!
  value: String!
}

input FilterByIdPermissionInput {
  id: String!
}

input FindOnePermissionInput {
  search: String!
  value: String!
}

input FilterByIdOrganizationInput {
  id: String!
}

input FindOneOrganizationInput {
  search: String!
  value: String!
}

type Mutation {
  USER_REGISTER(createUserInput: CreateUserInput!): User!
  USER_UPDATE(id: FilterByIdUserInput!, updateUserInput: UpdateUserInput!): User!
  USER_REMOVE(id: FilterByIdUserInput!): User!
  LOGIN_COGNITO(loginAuthDto: LoginAuthDto!): SignInRefreshAuthInterface!
  AUTH_COGNITO(createUserInput: SigUpDto!): SignUpAuthInterface!
  AUTH_REMOVE_COGNITO(removeUserAuth: RemoveUserAuthDto!): Boolean!
  RESEND_CONFIMATION_CODE_COGNITO(resendConfirmationCodeAuth: ResendConfirmationCodeAuthDto!): Boolean!
  LOGOUT_COGNITO(logoutUserAuth: LogoutAuthDto!): Boolean!
  REFRESH_COGNITO(refreshAuthDto: RefreshAuthDto!): SignInRefreshAuthInterface!
  INITIATE_ACCOUNT_RECOVERY_COGNITO(initiateAccountRecoveryDto: InitiateAccountRecoveryDto!): InitiateAccountRecoveryInterface!
  CONFIRM_ACCOUNT_RECOVERY_COGNITO(confirmAccountRecoveryDto: ConfirmAccountRecoveryDto!): ConfirmForgotPasswordInterface!
  ROLE_REGISTER(createRoleInput: CreateRoleInput!): Role!
  ROLE_UPDATE(id: FilterByIdRoleInput!, updateRoleInput: UpdateRoleInput!): Role!
  ROLE_REMOVE(id: FilterByIdRoleInput!): Role!
  PERMISSION_REGISTER(createPermissionInput: CreatePermissionInput!): Permission!
  PERMISSION_UPDATE(id: FilterByIdPermissionInput!, updatePermissionInput: UpdatePermissionInput!): Permission!
  PERMISSION_REMOVE(id: FilterByIdPermissionInput!): Permission!
  ORGANIZATION_REGISTER(createOrganizationInput: CreateOrganizationInput!): Organization!
  ORGANIZATION_UPDATE(id: FilterByIdOrganizationInput!, updateOrganizationInput: UpdateOrganizationInput!): Organization!
  ORGANIZATION_REMOVE(id: FilterByIdOrganizationInput!): Organization!
}

input CreateUserInput {
  isLocked: Boolean
  isDisabled: Boolean
  isVerified: Boolean
  name: String!
  surnames: String!
  email: String!
  password: String!
  address: String
  language: String
}

input UpdateUserInput {
  isLocked: Boolean
  isDisabled: Boolean
  isVerified: Boolean
  name: String
  surnames: String
  email: String
  password: String
  address: String
  language: String
}

input LoginAuthDto {
  userName: String!
  password: String!
}

input SigUpDto {
  name: String!
  surnames: String!
  email: String!
  password: String!
  address: String
  language: String
  organization: String
}

input RemoveUserAuthDto {
  userName: String!
}

input ResendConfirmationCodeAuthDto {
  userName: String!
}

input LogoutAuthDto {
  accessToken: String!
  idToken: String
  refreshToken: String
}

input RefreshAuthDto {
  refreshToken: String
}

input InitiateAccountRecoveryDto {
  userName: String!
}

input ConfirmAccountRecoveryDto {
  userName: String!
  verificationCode: String!
  newPassword: String!
}

input CreateRoleInput {
  isLocked: Boolean
  isDisabled: Boolean
  isVerified: Boolean
  name: String!
  permissions: [ID!]
  allPermission: Boolean
}

input UpdateRoleInput {
  isLocked: Boolean
  isDisabled: Boolean
  isVerified: Boolean
  name: String
  permissions: [ID!]
  allPermission: Boolean
}

input CreatePermissionInput {
  isLocked: Boolean
  isDisabled: Boolean
  isVerified: Boolean
  name: String!
  resourcePath: String!
  description: String
}

input UpdatePermissionInput {
  isLocked: Boolean
  isDisabled: Boolean
  isVerified: Boolean
  name: String
  resourcePath: String
  description: String
}

input CreateOrganizationInput {
  name: String!
}

input UpdateOrganizationInput {
  name: String
}