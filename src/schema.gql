# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Permission {
  _id: ID!
  isLocked: Boolean!
  isDisabled: Boolean!
  isVerified: Boolean!
  createdAt: String!
  updatedAt: String!
  name: String!
  url: String!
  description: String!
}

type PaginatedPermission {
  limit: Int
  page: Int
  docs: [Permission!]
  totalCount: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  totalPages: Int
  nextPage: Int
  prevPage: Int
  pagingCounter: Int
  totalDocs: Int
}

type Role {
  _id: ID!
  isLocked: Boolean!
  isDisabled: Boolean!
  isVerified: Boolean!
  createdAt: String!
  updatedAt: String!
  name: String!
  permissions: [Permission!]!
  allPermission: Boolean!
}

type PaginatedRole {
  limit: Int
  page: Int
  docs: [Role!]
  totalCount: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  totalPages: Int
  nextPage: Int
  prevPage: Int
  pagingCounter: Int
  totalDocs: Int
}

type User {
  _id: ID!
  isLocked: Boolean!
  isDisabled: Boolean!
  isVerified: Boolean!
  createdAt: String!
  updatedAt: String!
  name: String!
  surnames: String!
  email: String!
  language: String!
  roles: [Role!]!
}

type PaginatedAuthor {
  limit: Int
  page: Int
  docs: [User!]
  totalCount: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  totalPages: Int
  nextPage: Int
  prevPage: Int
  pagingCounter: Int
  totalDocs: Int
}

type SignInInterface {
  AccessToken: String!
  ExpiresIn: Float!
  TokenType: String!
  RefreshToken: String!
  IdToken: String!
}

type Query {
  sayHello: String!
  USER_TOTAL: Float!
  USER_LIST(limit: Int = 10, page: Int = 0, query: QueryInput, select: String, sort: SortInput, populate: [PopulateInput!], isPaginate: Boolean = true): PaginatedAuthor!
  USER_ID(id: ID!): User!
  USER_FIND_ONE(filter: FindOneUserInput!): User!
  AUTH_VALIDATE_REGISTRATION(configSigUpDto: ConfigSigUpDto!): Boolean!
  ROLE_TOTAL: Float!
  ROLE_LIST(limit: Int = 10, page: Int = 0, query: QueryInput, select: String, sort: SortInput, populate: [PopulateInput!], isPaginate: Boolean = true): PaginatedRole!
  ROLE_ID(id: ID!): Role!
  ROLE_FIND_ONE(filter: FindOneRoleInput!): Role!
  PERMISSION_TOTAL: Float!
  PERMISSION_LIST(limit: Int = 10, page: Int = 0, query: QueryInput, select: String, sort: SortInput, populate: [PopulateInput!], isPaginate: Boolean = true): PaginatedPermission!
  PERMISSION_ID(id: ID!): Permission!
  PERMISSION_FIND_ONE(filter: FindOnePermissionInput!): Permission!
}

input QueryInput {
  name: String
  surnames: Int
  email: Int
  isLocked: Boolean
  isDisabled: Boolean
  isVerified: Boolean
}

input SortInput {
  fields: [SortField!]!
}

input SortField {
  field: String!
  order: SortOrder!
}

enum SortOrder {
  DESC
  ASC
}

input PopulateInput {
  path: String!
  select: String
  model: String
}

input FindOneUserInput {
  search: String!
  value: String!
}

input ConfigSigUpDto {
  userName: String!
  code: String!
}

input FindOneRoleInput {
  search: String!
  value: String!
}

input FindOnePermissionInput {
  search: String!
  value: String!
}

type Mutation {
  USER_REGISTER(createUserInput: CreateUserInput!): User!
  USER_UPDATE(id: ID!, updateUserInput: UpdateUserInput!): User!
  USER_REMOVE(id: ID!): User!
  LOGIN_COGNITO(loginAuthDto: LoginAuthDto!): SignInInterface!
  AUTH_COGNITO(createUserInput: CreateUserInput!): User!
  ROLE_REGISTER(createRoleInput: CreateRoleInput!): Role!
  ROLE_UPDATE(id: ID!, updateRoleInput: UpdateRoleInput!): Role!
  ROLE_REMOVE(id: ID!): Role!
  PERMISSION_REGISTER(createPermissionInput: CreatePermissionInput!): Permission!
  PERMISSION_UPDATE(id: ID!, updatePermissionInput: UpdatePermissionInput!): Permission!
  PERMISSION_REMOVE(id: ID!): Permission!
}

input CreateUserInput {
  name: String!
  surnames: String!
  email: String!
  password: String!
  address: String
  language: String
  isLocked: Boolean
  isDisabled: Boolean
  isVerified: Boolean
}

input UpdateUserInput {
  name: String
  email: String
  address: String
  surnames: String
  language: String
  isLocked: Boolean
  isDisabled: Boolean
  isVerified: Boolean
}

input LoginAuthDto {
  userName: String!
  password: String!
}

input CreateRoleInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateRoleInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreatePermissionInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdatePermissionInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}